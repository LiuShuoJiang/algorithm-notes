/*
给定一个大小为n≤10^6的数组。
有一个大小为k的滑动窗口，它从数组的最左边移动到最右边。
你只能在窗口中看到k个数字。
每次滑动窗口向右移动一个位置。

你的任务是确定滑动窗口位于每个位置时，窗口中的最大值和最小值。

输入格式
输入包含两行。
第一行包含两个整数n和k，分别代表数组长度和滑动窗口的长度。
第二行有n个整数，代表数组的具体数值。
同行数据之间用空格隔开。

输出格式
输出包含两个。
第一行输出，从左至右，每个位置滑动窗口中的最小值。
第二行输出，从左至右，每个位置滑动窗口中的最大值。

输入样例：
8 3
1 3 -1 -3 5 3 6 7

输出样例：
-1 -3 -3 -3 3 3
3 3 5 5 6 7

注：暴力做法的时间复杂度为O(n*k)
*/

#include <iostream>
using namespace std;

const int N = 1000010;

int n, k;
int a[N], q[N];

int main() {
    scanf("%d%d", &n, &k);
    for (int i = 0; i < n; i++) scanf("%d", &a[i]);

    /*
    两个for循环完全类似，都做以下四步：
    1. 解决队首已经出窗口的问题;
    2. 解决队尾与当前元素a[i]不满足单调性的问题;
    3. 将当前元素下标加入队尾;
    4. 如果满足条件则输出结果
    注意：
    1. 上面四个步骤中一定要先3后4，因为有可能输出的正是新加入的那个元素;
    2. 队列中存的是原数组的下标，取值时要再套一层，a[q[]];
    3. 算最大值前注意将hh和tt重置;
    4. hh从0开始，数组下标也要从0开始
    */
    
    int hh = 0, tt = -1;

    //最小值
    for (int i = 0; i < n; i++) {
        //判断队头是否已经滑出窗口(也可用while)
        //(队列中实际存的是下标)
        //即i - q[hh] + 1 > k: 判断队头是否已经滑出当前窗口的范围
        //如果是，则将当前队头出队，即队头指针hh加1
        if (hh <= tt && i - k + 1 > q[hh]) hh++;

        while (hh <= tt && a[q[tt]] >= a[i]) tt--;  // 若队尾不单调，tt减1

        q[++tt] = i;

        if (i >= k - 1) printf("%d ", a[q[hh]]);
    }
    puts("");

    //最大值
    hh = 0, tt = -1;
    for (int i = 0; i < n; i++) {
        //判断队头是否已经滑出窗口
        if (hh <= tt && i - k + 1 > q[hh]) hh++;

        while (hh <= tt && a[q[tt]] <= a[i]) tt--;

        q[++tt] = i;

        if (i >= k - 1) printf("%d ", a[q[hh]]);
    }
    puts("");

    return 0;
}
