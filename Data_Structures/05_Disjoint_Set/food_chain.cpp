/*
动物王国中有三类动物A,B,C，这三类动物的食物链构成了有趣的环形。
A吃B，B吃C，C吃A。
现有N个动物，以1∼N编号。
每个动物都是A,B,C中的一种，但是我们并不知道它到底是哪一种。

有人用两种说法对这N个动物所构成的食物链关系进行描述：

第一种说法是1 X Y，表示X和Y是同类。
第二种说法是2 X Y，表示X吃Y。

此人对N个动物，用上述两种说法，一句接一句地说出K句话，这K句话有的是真的，有的是假的。
当一句话满足下列三条之一时，这句话就是假话，否则就是真话。
1. 当前的话与前面的某些真的话冲突，就是假话；
2. 当前的话中X或Y比N大，就是假话；
3 当前的话表示X吃X，就是假话。

你的任务是根据给定的N和K句话，输出假话的总数。

输入格式
第一行是两个整数N和K，以一个空格分隔。
以下K行每行是三个正整数D，X，Y，两数之间用一个空格隔开，其中D表示说法的种类。
若D=1，则表示X和Y是同类。
若D=2，则表示X吃Y。

输出格式
只有一个整数，表示假话的数目。

数据范围
1 ≤ N ≤ 50000,
0 ≤ K ≤ 100000

输入样例：
100 7
1 101 1 
2 1 2
2 2 3 
2 3 3 
1 1 3 
2 3 1 
1 5 5

输出样例：
3
*/

#include <iostream>
using namespace std;

const int N = 50010;

int n, m;
/*
采用并査集，但是多维护一个数组d，用来计算当前节点到父节点的距离(带边权的并查集)，
初始化为0(因为自身到自身的距离为0)
根据当前节点到根节点的距离
(根节点只能存在一个，其他节点都是根节点的子节点)
这个距离算出来只能出现三种情况：0, 1, 2(距离大于或者等于3，取模处理)
*/
int p[N], d[N];

int find(int x) {
    if (p[x] != x) {
        int t = find(p[x]);  //开始递归，最终用t储存根节点
        d[x] += d[p[x]];  //在递归过程中求得每个点到根节点的距离
        p[x] = t;  //将每个点的父节点指向根节点
    }
    return p[x];
}

int main() {
    scanf("%d%d", &n, &m);

    for (int i = 1; i <= n; i++) p[i] = i;

    int res = 0;
    while (m--) {
        int t, x, y;
        scanf("%d%d%d", &t, &x, &y);

        if (x > n || y > n) res++;
        else {
            int px = find(x), py = find(y);
            if (t == 1) {
                //判断x和y是否都在同一个根节点上
                //如果x和y的父节点(px, py)在同一个根节点上(说明px和py已经处理过关系了)，则判断距离是否相等
                if (px == py && (d[x] - d[y]) % 3) res++;  //假话
                //当前不在同一集合中，无法判定为假。故为真，应加入同一集合表示存在同类关系
                else if (px != py) {  //如果px != py，说明x和y还没有关系，可以进行合并
                    p[px] = py;
                    d[px] = d[y] - d[x];  //(d[x] + d[px] - d[y]) % 3 == 0
                }
            } else {
                if (px == py && (d[x] - d[y] - 1) % 3) res++;  //C++中负数取模得非正数，需要注意别写错
                else if (px != py) {
                    p[px] = py;
                    d[px] = d[y] + 1 - d[x];  //(d[x] + d[px] - d[y] -1 ) % 3 == 0
                }
            }
        }
    }

    printf("%d\n", res);

    return 0;
}
